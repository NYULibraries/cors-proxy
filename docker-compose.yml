version: '3.7'

x-deploy-environment: &x-deploy-environment
  BACKEND_BUCKET: 
  BACKEND_REGION: 
  BACKEND_DYNAMODB_TABLE: 
  AWS_ACCESS_KEY_ID: 
  AWS_SECRET_ACCESS_KEY: 
  AWS_DEFAULT_REGION: 
  TF_VAR_lambda_exec_arn: 
  TF_VAR_apigw_id: 
  TF_VAR_apigw_root_resource_id: 
  TF_VAR_apigw_execution_arn: 
  TF_VAR_lambda_s3_bucket: 
  TF_VAR_aws_username: 
  TF_VAR_apigw_stage:
  TF_VAR_lambda_version:
  TF_VAR_environment_variables:

services:
  coverage:
    image: cors-proxy
    build:
      context: .
      cache_from:
        - cors-proxy
        - $IMAGES_DOMAIN/cors-proxy
    command: yarn test-and-report
    environment:
      COVERALLS_REPO_TOKEN:
  deploy:
    image: cors-proxy
    build:
      context: .
      cache_from:
        - cors-proxy
        - $IMAGES_DOMAIN/cors-proxy
    command: yarn deploy --stage=${STAGE} --region=${REGION}
    environment:
      LAMBDA_ROLE:
      AWS_ACCESS_KEY_ID:
      AWS_SECRET_ACCESS_KEY:
      REGION:
      STAGE:
      REST_API_ID:
      REST_API_ROOT_RESOURCE_ID:
      REST_API_NAMESPACE_RESOURCE_ID:
      S3_BUCKET:
      # CORS-PROXY SECRETS/CONFIG VALUES

  terraform_deploy:
    build:
      context: deploy/
    command: ["terraform", "apply", "-auto-approve"]
    environment:
      <<: *x-deploy-environment
      BACKEND_KEY: lambdas/tf_state/cors-proxy
      TF_VAR_lambda_function_name: cors-proxy
      TF_VAR_lambda_handler: handler.corsProxy
      TF_VAR_lambda_runtime: nodejs12.x
      TF_VAR_lambda_method: GET
      TF_VAR_lambda_memory_limit: 1024

  build_lambda:
    image: cors-proxy-build
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        production: "true"
    command: sh -c 'mkdir dist; cat .lambdafiles | xargs zip -r -9 -q ./dist/cors-proxy.zip'
    labels:
      - 'nyulibraries.app=cors-proxy'
