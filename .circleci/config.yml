docker-defaults: &docker-defaults
  docker:
    - image: cimg/base:2021.07
  working_directory: ~/app

version: 2.1
orbs:
  aws-s3: circleci/aws-s3@3.0
commands:
  clear_old_builds:
    steps:
      - run: 
          name: Clear old S3 builds
          command: |
            export S3_BUCKET=${TF_VAR_lambda_s3_bucket}
            export LAMBDA_FN="cors-proxy"
            ./scripts/clear_old_builds.sh
  terraform_deploy:
    steps:
      -  run:
          name: Deploy the Lambda to AWS via Terraform
          command: |
            export TF_VAR_lambda_version=${CIRCLE_SHA1}
            docker-compose run fn_create
  get_lambda_zip:
    steps:
      - run:
          name: Retrieve zipped lambda from container
          command: |
            docker cp $(docker ps -aq --filter 'label=nyulibraries.app=cors-proxy'):/app/dist .
  zip: 
    steps:
      - run:
          name: Zip Lambda files
          command: docker-compose run build_lambda
  auth_quay:
    steps:
      - run:
          name: Docker login
          command: docker login quay.io -u "$QUAY_USERNAME" --password "$QUAY_PASSWORD"
  pull_docker: 
    steps:
      - run:
          name: Pull docker images
          command: ./scripts/pull_docker.sh || exit 0
  push_docker:
    steps:
      - run:
          name: Push docker images
          command: ./scripts/push_docker.sh
  build:
    steps:
      - run:
          name: Build images
          command: docker-compose build
  test: 
    steps:
      - run:
          name: Test
          command: docker-compose run test
  s3_deploy:
    steps:
      - aws-s3/sync:
          from: dist
          to: 's3://${TF_VAR_lambda_s3_bucket}/cors-proxy/${CIRCLE_SHA1}'
          arguments: |
            --exclude "*" \
            --include "cors-proxy.zip" \
            --delete
  install_awscli:
    steps:
      - run:
          name: Install AWS-CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
jobs:
  clear-old-builds:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker
      - install_awscli
      - clear_old_builds

  build-lambda:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker
      - build
      - zip
      - get_lambda_zip
      - s3_deploy

  deploy-lambda:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker
      - terraform_deploy

  test:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - auth_quay
      - pull_docker
      - build
      - push_docker
      - test

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - test
      - clear-old-builds:
          context: web-lambdas-api-gateway-dev
          name: clear-old-builds-dev
          filters:
            branches:
              ignore: master
      - clear-old-builds:
          context: web-lambdas-api-gateway-prod
          name: clear-old-builds-prod
          filters:
            branches:
              only: master
      - build-lambda:
          name: build-lambda-dev
          context: web-lambdas-api-gateway-dev
          filters:
            branches:
              ignore: master
          requires:
            - test
            - clear-old-builds-dev
      - deploy-lambda:
          name: deploy-lambda-dev
          context: web-lambdas-api-gateway-dev
          filters:
            branches:
              ignore: master
          requires:
            - build-lambda-dev
      - build-lambda:
          name: build-lambda-prod
          context: web-lambdas-api-gateway-prod
          filters:
            branches:
              only: master
          requires:
            - test
            - clear-old-builds-prod
      - deploy-lambda:
          name: deploy-lambda-prod
          context: web-lambdas-api-gateway-prod
          filters:
            branches:
              only: master
          requires:
            - build-lambda-prod

